// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/03/2020 23:10:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fib
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fib_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [11:0] number;
reg reset;
// wires                                               
wire [11:0] address;
wire [11:0] counter;
wire [15:0] out;
wire [15:0] outram;
wire ready;
wire [1:0] stage;

// assign statements (if any)                          
fib i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.CLK(CLK),
	.counter(counter),
	.number(number),
	.out(out),
	.outram(outram),
	.ready(ready),
	.reset(reset),
	.stage(stage)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// number[ 11 ]
initial
begin
	number[11] = 1'b0;
end 
// number[ 10 ]
initial
begin
	number[10] = 1'b0;
end 
// number[ 9 ]
initial
begin
	number[9] = 1'b0;
end 
// number[ 8 ]
initial
begin
	number[8] = 1'b0;
end 
// number[ 7 ]
initial
begin
	number[7] = 1'b0;
end 
// number[ 6 ]
initial
begin
	number[6] = 1'b0;
end 
// number[ 5 ]
initial
begin
	number[5] = 1'b0;
end 
// number[ 4 ]
initial
begin
	number[4] = 1'b0;
end 
// number[ 3 ]
initial
begin
	number[3] = 1'b1;
	number[3] = #300000 1'b0;
	number[3] = #120000 1'b1;
end 
// number[ 2 ]
initial
begin
	number[2] = 1'b0;
	number[2] = #300000 1'b1;
	number[2] = #120000 1'b0;
	number[2] = #570000 1'b1;
end 
// number[ 1 ]
initial
begin
	number[1] = 1'b1;
	number[1] = #420000 1'b0;
	number[1] = #270000 1'b1;
end 
// number[ 0 ]
initial
begin
	number[0] = 1'b0;
	number[0] = #690000 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
	reset = #290000 1'b1;
	reset = #20000 1'b0;
	reset = #80000 1'b1;
	reset = #20000 1'b0;
	reset = #250000 1'b1;
	reset = #20000 1'b0;
end 
endmodule

